SELECT *
FROM books;

SELECT *
FROM customers;

SELECT *
FROM orders;

-- 1) Retrieve all the books in the "fiction" genre
SELECT *
FROM books
WHERE genre = 'Fiction';

-- 2) Find books published after the year 1950
SELECT *
FROM books
WHERE Published_Year = 1950;

-- 3) List all customers from Canada
SELECT *
FROM customers
WHERE Country = 'Canada';

-- 4) Orders placed in November 2023
SELECT *
FROM orders
WHERE Order_Date BETWEEN '2023-11-01' AND '2023-11-30';

-- 5) Retrieve the total stock of books available
SELECT SUM(Stock) AS total_stock
FROM books;

-- 6) Find the details of the most expensive book
SELECT *
FROM books
ORDER BY Price DESC
LIMIT 1;

-- 7) Show all customers who ordered more than 1 quantity of a book
SELECT *
FROM orders
WHERE Quantity > 1;

-- 8) Retrieve all orders where the total amount exceeds $20
SELECT *
FROM orders
WHERE Total_Amount > 20;

-- 9) List all genres available in the books table
SELECT DISTINCT Genre
FROM books;

-- 10) Find the book with the lowest stock
SELECT *
FROM books
ORDER BY Stock 
LIMIT 1;

-- 11) Calculate the total revenue generated by all the orders
SELECT SUM(Total_Amount) AS Revenue
FROM orders;

-- 12) Retrieve total number of books sold for each genre
SELECT books.Genre, SUM(orders.Quantity) AS Total_Books_Sold
FROM orders
JOIN books
ON orders.Book_ID = books.Book_ID
GROUP BY books.Genre;

-- 13) Find the average price of books in the "fantasy" genre
SELECT AVG(Price) AS Average_Price
FROM books
WHERE Genre = "Fantasy";

-- 14) List customers who have placed at least 2 orders
SELECT Orders.Customer_ID, customers.Name, COUNT(orders.Order_ID) AS Order_Count
FROM orders
JOIN customers
ON orders.Customer_ID = customers.Customer_ID
GROUP BY orders.Customer_id, customers.Name
HAVING COUNT(Quantity) >= 2;

-- 15) Find the most frequently ordered book
SELECT orders.Book_ID, books.Title, COUNT(orders.Order_ID) AS Order_Count
FROM orders
JOIN books
ON orders.Book_ID = books.Book_ID
GROUP BY orders.Book_ID, books.Title
ORDER BY Order_Count DESC 
LIMIT 1;

-- 16) Show the top 3 most expensive books of "fantasy" genre
SELECT *
FROM books
WHERE Genre = "Fantasy"
ORDER BY Price DESC
LIMIT 3;

-- 17) Retrieve the total quantity of books sold by each author
SELECT books.Author, SUM(orders.Quantity) AS Total_Books_Sold
FROM orders
JOIN books
ON orders.Book_ID = books.Book_ID
GROUP BY books.Author;

-- 18) List the cities where customers who spent over $30 are located
SELECT DISTINCT customers.City, total_amount
FROM orders
JOIN customers
ON orders.Customer_ID = customers.Customer_ID
WHERE orders.total_amount > 30;

-- 19) Find the customer who spent most on orders
SELECT customers.Customer_ID, customers.Name, SUM(orders.Total_Amount) AS Total_spent
FROM orders
JOIN customers
ON orders.Customer_ID = customers.Customer_ID
GROUP BY customers.Customer_ID, customers.Name
ORDER  BY Total_Spent DESC
LIMIT 1;

-- 20) Calculate the remaining stock after completing all orders
SELECT books.Book_ID, books.Title, books.Stock, COALESCE(SUM(orders.Quantity), 0) AS Order_Quantity,
books.Stock - COALESCE(SUM(orders.Quantity), 0) AS Remaining_Quantity
FROM books
LEFT JOIN orders
ON books.Book_ID = orders.Book_ID
GROUP BY books.Book_ID, books.Title, books.Stock
ORDER BY books.Book_ID;